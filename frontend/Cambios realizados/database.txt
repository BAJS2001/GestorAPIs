descargar e intalar postgressql
se crea un nuevo schema llamado getorapis
se importa el archivo proyecto.sql y se ejecuta
OJO TIENE QUE SER EN UTF-8 PARA QUE SEA COMPATIBLE CON DJANGO
Encoding: UTF8 ✅

Collation: es-ES ✅

Character Type: es-ES ✅

-------------------
INTEGRAR PROYECTO A DJANGO (BACKEND)

activado el entorno virtual intalar: pip install psycopg2-binary

ir a C:\APIs\gestorAPIs-main\backend\backend\settings.py
 reemplazar 
	DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

por

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'gestorapisUTF8',
        'USER': 'postgres',
        'PASSWORD': 'admin',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}


para probar conexion y migraciones ejecutar desde  C:\APIs\gestorAPIs-main\backend
python manage.py makemigrations
python manage.py migrate
 	DEBE SALIR ALGO PARECIDO A LO SIGUIENTE:
	(venv) PS C:\APIs\gestorAPIs-main\backend> python manage.py makemigrations
No changes detected
(venv) PS C:\APIs\gestorAPIs-main\backend> python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, sessions
Running migrations:
  Applying contenttypes.0001_initial... OK
  Applying auth.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  Applying auth.0007_alter_validators_add_error_messages... OK
  Applying auth.0008_alter_user_username_max_length... OK
  Applying auth.0009_alter_user_last_name_max_length... OK
  Applying auth.0010_alter_group_name_max_length... OK
  Applying auth.0011_update_proxy_permissions... OK
  Applying auth.0012_alter_user_first_name_max_length... OK
  Applying sessions.0001_initial... OK
(venv) PS C:\APIs\gestorAPIs-main\backend> 

----------------------------------------------------------
Crear un superusuario para entrar al panel administrativo de Django
python manage.py createsuperuser
dentro de  C:\APIs\gestorAPIs-main\backend ejecutar
python manage.py createsuperuser
	va a pedir usuario : adminAPIS
	correro (ficticio pero le puse el mio porsiacaso) bryanjuca82001@
	clave bajs123
LUEGO YA SE PUEDE LEVANTAR EL SERVER (python manage.py runserver)
Y ENTRAR EN http://localhost:8000/admin

una vez todo correcto ya se puede ir a http://127.0.0.1:8000/admin

y entrar con el usuario y clave puestos
------------------------------------------------------------
crear rutas propias para que pueda existir una fluidez con las rutas puestas en el 
frontend y evitar muchos problemas al integrar 

ir a C:\APIs\gestorAPIs-main\backend\apis\

crear un archivo urls.py

dentro de eso se poner :
# backend/apis/urls.py

from django.urls import path
from . import views

urlpatterns = [
    path('apis/', views.lista_apis, name='lista_apis'),
    path('crear/', views.crear_api, name='crear_api'),
]


paso 2 crear las funciones minimas en views.py :C:\APIs\gestorAPIs-main\backend\apis\views.py
# backend/apis/views.py

from django.http import JsonResponse

def lista_apis(request):
    return JsonResponse({"mensaje": "Lista de APIs disponible"})

def crear_api(request):
    return JsonResponse({"mensaje": "Formulario para crear una API"})

paso 3 conectar las urls de apis en el proyecto principal
	abrir:C:\APIs\gestorAPIs-main\backend\backend\urls.py
	incluir from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('apis.urls')),  # <--- Aquí conectamos tus rutas
]


}

